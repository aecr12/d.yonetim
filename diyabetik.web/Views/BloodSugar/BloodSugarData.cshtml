@model BloodSugarDataViewModel

@{
    var bloodSugars = Model.BloodSugarDatas;
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<title>list</title>
    <link href="/modules/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <script src="/modules/jquery/dist/jquery.min.js"></script>
</head>
<body>
    @await Html.PartialAsync("_navbar")
    
    <partial name="_header"></partial>
    <main>
        <div class="container">
            <div class="row">
                <div class="col-md-3">

                @* kategorilerin invoke ile oluşturulması. Başka yöntemlerle de oluşturulabilirdi. Farklı kullanım yöntemlerini öğrenmek için,
                bu şekilde kullandım *@
                    @await Component.InvokeAsync("Categories")
                </div>
                <div class="col-md-9">
                    
                    @*Ürünler Gelecek*@
                    @if(Model.BloodSugarDatas.Count == 0)
                    {
                        @await Html.PartialAsync("_nouser")
                    }
                    else
                    {
                        <div class="row">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            
                                            <th scope="col">Id</th>
                                            <th scope="col">Değer</th>
                                            <th scope="col">Tarih</th>
                                            <th scope="col"></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (var i = 0; i < Model.BloodSugarDatas.Count; i++)
                                        {
                                            <tr>
                                                
                                                <td>@Model.BloodSugarDatas[@i].Id</td>
                                                <td>@Model.BloodSugarDatas[@i].BloodSugarValue</td>
                                                <td>@Model.BloodSugarDatas[@i].Date</td>
                                                <td>
                                                    <a class="btn btn-primary btn-sm d-flex justify-content-center" href=/Bloodsugar/BloodSugarDelete/@Model.BloodSugarDatas[@i].Id class="btn btn-primary" onclick="sendId('@Model.BloodSugarDatas[i].Id')">Sil</a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                        </div>
                    }
                    </div>
                    </div>
	</div>
    </main>
</body>
</html>


<script>
    // tıklanılan öge üzerinde işlem yapmak için, tıklanılan ögenin id bilgisi ajax ile controllere gönerildi
    // silmek için kullanılan fonksiyon tetiklendi ve tıklanılan ögenin id si bu fonksiyona parametre olarak gönderildi
    function sendId(id){
        $.ajax({
		url: "/BloodSugar/BloodSugarDelete",
		type: "POST",
		dataType: "text",
		data: { id: id },
		success: function(response) {
    },
    error: function(error) {
    }
	});
    }
</script>